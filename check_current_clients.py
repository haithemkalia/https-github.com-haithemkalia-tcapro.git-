#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour v√©rifier l'√©tat actuel de la base de donn√©es clients
"""

import sqlite3
import os

def check_current_clients():
    """
    V√©rifie l'√©tat actuel de la base de donn√©es
    """
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'visa_tracking.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Erreur: Base de donn√©es non trouv√©e √† {db_path}")
        return False
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç √âtat actuel de la base de donn√©es:")
        print("=" * 50)
        
        # Compter le nombre total de clients
        cursor.execute("SELECT COUNT(*) FROM clients")
        total_clients = cursor.fetchone()[0]
        print(f"üìä Nombre total de clients: {total_clients}")
        
        # Obtenir les derniers IDs clients
        cursor.execute("SELECT client_id, full_name FROM clients ORDER BY rowid DESC LIMIT 10")
        recent_clients = cursor.fetchall()
        
        print("\nüîç Les 10 derniers clients ajout√©s:")
        for i, (client_id, full_name) in enumerate(recent_clients, 1):
            print(f"   {i:2d}. {client_id} - {full_name}")
        
        # Chercher sp√©cifiquement les clients CLI843+
        cursor.execute("SELECT client_id, full_name FROM clients WHERE client_id >= 'CLI843' ORDER BY client_id")
        test_clients = cursor.fetchall()
        
        if test_clients:
            print(f"\n‚ö†Ô∏è  Clients de test trouv√©s (CLI843+): {len(test_clients)}")
            for client_id, full_name in test_clients:
                print(f"   - {client_id}: {full_name}")
        else:
            print("\n‚úÖ Aucun client de test (CLI843+) trouv√©.")
        
        # V√©rifier la plage des IDs
        cursor.execute("SELECT MIN(client_id), MAX(client_id) FROM clients WHERE client_id LIKE 'CLI%'")
        min_id, max_id = cursor.fetchone()
        
        print(f"\nüìä Plage des IDs:")
        print(f"   Minimum: {min_id}")
        print(f"   Maximum: {max_id}")
        
        conn.close()
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå Erreur de base de donn√©es: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

if __name__ == "__main__":
    check_current_clients()