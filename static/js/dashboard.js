 document.addEventListener('DOMContentLoaded', function() { initializeDashboard(); }); let refreshInterval; const REFRESH_RATE = 120000; let chartInstance = null; let statusChart = null; let autoRefreshEnabled = true; function isPageVisible() { return !document.hidden; } function initializeDashboard() { console.log('üöÄ Initialisation du tableau de bord TCA'); initializeStatusChart(); initializeProgressBars(); if (isDashboardPage() && autoRefreshEnabled) { refreshInterval = setInterval(refreshDashboardData, 60000); } handlePageVisibility(); console.log('‚úÖ Tableau de bord initialis√© avec succ√®s'); } function isDashboardPage() { return window.location.pathname === '/' || window.location.pathname === '/index'; } function initializeProgressBars() { const progressBars = document.querySelectorAll('.progress-bar[data-count]'); progressBars.forEach(bar => { const count = parseInt(bar.getAttribute('data-count')) || 0; const total = parseInt(bar.getAttribute('data-total')) || 1; const percentage = total > 0 ? (count / total * 100) : 0; bar.style.width = percentage + '%'; }); } function initializeStatusChart() { const statusCtx = document.getElementById('statusChart'); if (!statusCtx) { return; } fetchChartData().then(data => { if (data) { createStatusChart(); } }); } function fetchChartData() { return fetch('/api/chart-data') .then(response => { if (!response.ok) { throw new Error('Network response was not ok'); } return response.json(); }) .then(data => { return data; }) .catch(error => { console.error('Error fetching chart data:', error); return null; }); } function createStatusChart() { const ctx = document.getElementById('statusChart'); if (!ctx) { console.warn('‚ö†Ô∏è √âl√©ment statusChart non trouv√©'); return; } if (chartInstance) { chartInstance.destroy(); chartInstance = null; } const statusDataElement = document.getElementById('status-data'); if (!statusDataElement) { console.warn('‚ö†Ô∏è Donn√©es de statut non trouv√©es'); return; } const statusData = JSON.parse(statusDataElement.textContent || '{}'); const filteredData = Object.entries(statusData).filter(([key, value]) => value > 0); const labels = filteredData.map(([key]) => key); const data = filteredData.map(([, value]) => value); if (labels.length === 0) { console.log('üìä Aucune donn√©e √† afficher dans le graphique'); return; } const colors = [ '#28a745', '#ffc107', '#dc3545', '#17a2b8', '#6f42c1', '#fd7e14', '#20c997', '#e83e8c' ]; chartInstance = new Chart(ctx, { type: 'doughnut', data: { labels: labels, datasets: [{ data: data, backgroundColor: colors.slice(0, labels.length), borderWidth: 2, borderColor: '#fff' }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { padding: 20, usePointStyle: true, font: { size: 12 } } }, tooltip: { callbacks: { label: function(context) { const label = context.label || ''; const value = context.parsed; const total = context.dataset.data.reduce((a, b) => a + b, 0); const percentage = ((value / total) * 100).toFixed(1); return `${label}: ${value} (${percentage}%)`; } } } }, animation: { animateRotate: true, duration: 800 } } }); console.log('üìä Graphique des statuts cr√©√© avec succ√®s'); } function refreshDashboardData() { if (!isPageVisible || !isDashboardPage()) { return; } fetchChartData().then(data => { if (data && statusChart) { statusChart.data.labels = data.labels; statusChart.data.datasets[0].data = data.values; statusChart.update(); } }); fetch('/api/stats') .then(response => response.json()) .then(data => { const statsNumber = document.querySelector('.stats-card .stats-number'); if (statsNumber) { statsNumber.textContent = data.total_clients || 0; } }) .catch(error => { console.log('Error updating stats:', error); }); } function toggleAutoRefresh(enabled) { autoRefreshEnabled = enabled; if (refreshInterval) { clearInterval(refreshInterval); refreshInterval = null; } if (enabled && isDashboardPage()) { refreshInterval = setInterval(refreshDashboardData, 60000); } } function manualRefresh() { if (isDashboardPage()) { refreshDashboardData(); } } window.dashboardFunctions = { refreshDashboardData, initializeDashboard, toggleAutoRefresh, manualRefresh, isDashboardPage }; function handlePageVisibility() { document.addEventListener('visibilitychange', function() { if (document.hidden) { isPageVisible = false; if (refreshInterval) { clearInterval(refreshInterval); refreshInterval = null; } console.log('‚è∏Ô∏è Rafra√Æchissement automatique mis en pause (page cach√©e)'); } else { isPageVisible = true; if (autoRefreshEnabled && !refreshInterval) { refreshInterval = setInterval(refreshDashboardData, 60000); refreshDashboardData(); } console.log('‚ñ∂Ô∏è Rafra√Æchissement automatique repris (page visible)'); } }); window.addEventListener('focus', function() { if (!isPageVisible) { isPageVisible = true; if (autoRefreshEnabled && !refreshInterval) { refreshInterval = setInterval(refreshDashboardData, 60000); refreshDashboardData(); } } }); window.addEventListener('blur', function() { isPageVisible = false; if (refreshInterval) { clearInterval(refreshInterval); refreshInterval = null; } }); }