{"version":3,"file":"js/dashboard.2e6f3d486f5269e9ca88.js","mappings":"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","sources":["webpack://tca-visa-tracking-system/./static/js/dashboard.js"],"sourcesContent":[" document.addEventListener('DOMContentLoaded', function() { initializeDashboard(); }); let refreshInterval; const REFRESH_RATE = 120000; let chartInstance = null; let statusChart = null; let autoRefreshEnabled = true; function isPageVisible() { return !document.hidden; } function initializeDashboard() { console.log('üöÄ Initialisation du tableau de bord TCA'); initializeStatusChart(); initializeProgressBars(); if (isDashboardPage() && autoRefreshEnabled) { refreshInterval = setInterval(refreshDashboardData, 60000); } handlePageVisibility(); console.log('‚úÖ Tableau de bord initialis√© avec succ√®s'); } function isDashboardPage() { return window.location.pathname === '/' || window.location.pathname === '/index'; } function initializeProgressBars() { const progressBars = document.querySelectorAll('.progress-bar[data-count]'); progressBars.forEach(bar => { const count = parseInt(bar.getAttribute('data-count')) || 0; const total = parseInt(bar.getAttribute('data-total')) || 1; const percentage = total > 0 ? (count / total * 100) : 0; bar.style.width = percentage + '%'; }); } function initializeStatusChart() { const statusCtx = document.getElementById('statusChart'); if (!statusCtx) { return; } fetchChartData().then(data => { if (data) { createStatusChart(); } }); } function fetchChartData() { return fetch('/api/chart-data') .then(response => { if (!response.ok) { throw new Error('Network response was not ok'); } return response.json(); }) .then(data => { return data; }) .catch(error => { console.error('Error fetching chart data:', error); return null; }); } function createStatusChart() { const ctx = document.getElementById('statusChart'); if (!ctx) { console.warn('‚ö†Ô∏è √âl√©ment statusChart non trouv√©'); return; } if (chartInstance) { chartInstance.destroy(); chartInstance = null; } const statusDataElement = document.getElementById('status-data'); if (!statusDataElement) { console.warn('‚ö†Ô∏è Donn√©es de statut non trouv√©es'); return; } const statusData = JSON.parse(statusDataElement.textContent || '{}'); const filteredData = Object.entries(statusData).filter(([key, value]) => value > 0); const labels = filteredData.map(([key]) => key); const data = filteredData.map(([, value]) => value); if (labels.length === 0) { console.log('üìä Aucune donn√©e √† afficher dans le graphique'); return; } const colors = [ '#28a745', '#ffc107', '#dc3545', '#17a2b8', '#6f42c1', '#fd7e14', '#20c997', '#e83e8c' ]; chartInstance = new Chart(ctx, { type: 'doughnut', data: { labels: labels, datasets: [{ data: data, backgroundColor: colors.slice(0, labels.length), borderWidth: 2, borderColor: '#fff' }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { padding: 20, usePointStyle: true, font: { size: 12 } } }, tooltip: { callbacks: { label: function(context) { const label = context.label || ''; const value = context.parsed; const total = context.dataset.data.reduce((a, b) => a + b, 0); const percentage = ((value / total) * 100).toFixed(1); return `${label}: ${value} (${percentage}%)`; } } } }, animation: { animateRotate: true, duration: 800 } } }); console.log('üìä Graphique des statuts cr√©√© avec succ√®s'); } function refreshDashboardData() { if (!isPageVisible || !isDashboardPage()) { return; } fetchChartData().then(data => { if (data && statusChart) { statusChart.data.labels = data.labels; statusChart.data.datasets[0].data = data.values; statusChart.update(); } }); fetch('/api/stats') .then(response => response.json()) .then(data => { const statsNumber = document.querySelector('.stats-card .stats-number'); if (statsNumber) { statsNumber.textContent = data.total_clients || 0; } }) .catch(error => { console.log('Error updating stats:', error); }); } function toggleAutoRefresh(enabled) { autoRefreshEnabled = enabled; if (refreshInterval) { clearInterval(refreshInterval); refreshInterval = null; } if (enabled && isDashboardPage()) { refreshInterval = setInterval(refreshDashboardData, 60000); } } function manualRefresh() { if (isDashboardPage()) { refreshDashboardData(); } } window.dashboardFunctions = { refreshDashboardData, initializeDashboard, toggleAutoRefresh, manualRefresh, isDashboardPage }; function handlePageVisibility() { document.addEventListener('visibilitychange', function() { if (document.hidden) { isPageVisible = false; if (refreshInterval) { clearInterval(refreshInterval); refreshInterval = null; } console.log('‚è∏Ô∏è Rafra√Æchissement automatique mis en pause (page cach√©e)'); } else { isPageVisible = true; if (autoRefreshEnabled && !refreshInterval) { refreshInterval = setInterval(refreshDashboardData, 60000); refreshDashboardData(); } console.log('‚ñ∂Ô∏è Rafra√Æchissement automatique repris (page visible)'); } }); window.addEventListener('focus', function() { if (!isPageVisible) { isPageVisible = true; if (autoRefreshEnabled && !refreshInterval) { refreshInterval = setInterval(refreshDashboardData, 60000); refreshDashboardData(); } } }); window.addEventListener('blur', function() { isPageVisible = false; if (refreshInterval) { clearInterval(refreshInterval); refreshInterval = null; } }); }"],"names":["refreshInterval","document","addEventListener","initializeDashboard","chartInstance","statusChart","autoRefreshEnabled","isPageVisible","hidden","getElementById","fetchChartData","then","data","ctx","destroy","statusDataElement","statusData","JSON","parse","textContent","filteredData","Object","entries","filter","_ref","_ref2","_slicedToArray","labels","map","_ref3","_ref5","length","Chart","type","datasets","backgroundColor","slice","borderWidth","borderColor","options","responsive","maintainAspectRatio","plugins","legend","position","padding","usePointStyle","font","size","tooltip","callbacks","label","context","value","parsed","percentage","dataset","reduce","a","b","toFixed","concat","animation","animateRotate","duration","createStatusChart","initializeStatusChart","querySelectorAll","forEach","bar","count","parseInt","getAttribute","total","style","width","isDashboardPage","setInterval","refreshDashboardData","clearInterval","window","location","pathname","fetch","response","ok","Error","json","error","values","update","statsNumber","querySelector","total_clients","dashboardFunctions","toggleAutoRefresh","enabled","manualRefresh"],"sourceRoot":""}