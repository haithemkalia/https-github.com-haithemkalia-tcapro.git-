/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/dashboard.js":
/*!********************************!*\
  !*** ./static/js/dashboard.js ***!
  \********************************/
/***/ (() => {

eval("{function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// Dashboard JavaScript for TCA Visa Tracking System\n\n// Initialize dashboard when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n  initializeDashboard();\n});\n\n// Configuration du rafra√Æchissement automatique (optimis√©)\nvar refreshInterval;\nvar REFRESH_RATE = 120000; // 2 minutes (r√©duit de 30s √† 2min pour √©conomiser les ressources)\nvar chartInstance = null;\nvar statusChart = null;\nvar autoRefreshEnabled = true;\n\n// Fonction pour v√©rifier si la page est visible\nfunction isPageVisible() {\n  return !document.hidden;\n}\nfunction initializeDashboard() {\n  console.log('üöÄ Initialisation du tableau de bord TCA');\n\n  // Initialize status chart\n  initializeStatusChart();\n\n  // Initialize progress bars\n  initializeProgressBars();\n\n  // Set up auto-refresh only on dashboard/index page\n  if (isDashboardPage() && autoRefreshEnabled) {\n    refreshInterval = setInterval(refreshDashboardData, 60000); // Refresh every 60 seconds\n  }\n\n  // G√©rer la visibilit√© de la page pour √©conomiser les ressources\n  handlePageVisibility();\n  console.log('‚úÖ Tableau de bord initialis√© avec succ√®s');\n}\n\n// Check if current page is the dashboard/index page\nfunction isDashboardPage() {\n  return window.location.pathname === '/' || window.location.pathname === '/index';\n}\n\n// Initialize progress bars\nfunction initializeProgressBars() {\n  var progressBars = document.querySelectorAll('.progress-bar[data-count]');\n  progressBars.forEach(function (bar) {\n    var count = parseInt(bar.getAttribute('data-count')) || 0;\n    var total = parseInt(bar.getAttribute('data-total')) || 1;\n    var percentage = total > 0 ? count / total * 100 : 0;\n    bar.style.width = percentage + '%';\n  });\n}\nfunction initializeStatusChart() {\n  var statusCtx = document.getElementById('statusChart');\n  if (!statusCtx) {\n    // Silently return if chart canvas is not found (normal on other pages)\n    return;\n  }\n\n  // Fetch initial data and create chart\n  fetchChartData().then(function (data) {\n    if (data) {\n      createStatusChart();\n    }\n  });\n}\nfunction fetchChartData() {\n  return fetch('/api/chart-data').then(function (response) {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(function (data) {\n    return data;\n  })[\"catch\"](function (error) {\n    console.error('Error fetching chart data:', error);\n    return null;\n  });\n}\nfunction createStatusChart() {\n  var ctx = document.getElementById('statusChart');\n  if (!ctx) {\n    console.warn('‚ö†Ô∏è √âl√©ment statusChart non trouv√©');\n    return;\n  }\n\n  // D√©truire le graphique existant s'il existe pour √©viter les fuites m√©moire\n  if (chartInstance) {\n    chartInstance.destroy();\n    chartInstance = null;\n  }\n\n  // R√©cup√©rer les donn√©es depuis les √©l√©ments data\n  var statusDataElement = document.getElementById('status-data');\n  if (!statusDataElement) {\n    console.warn('‚ö†Ô∏è Donn√©es de statut non trouv√©es');\n    return;\n  }\n  var statusData = JSON.parse(statusDataElement.textContent || '{}');\n\n  // Filtrer les donn√©es vides pour am√©liorer les performances\n  var filteredData = Object.entries(statusData).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return value > 0;\n  });\n  var labels = filteredData.map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n      key = _ref4[0];\n    return key;\n  });\n  var data = filteredData.map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      value = _ref6[1];\n    return value;\n  });\n  if (labels.length === 0) {\n    console.log('üìä Aucune donn√©e √† afficher dans le graphique');\n    return;\n  }\n  var colors = ['#28a745',\n  // Vert pour les statuts positifs\n  '#ffc107',\n  // Jaune pour en cours\n  '#dc3545',\n  // Rouge pour les probl√®mes\n  '#17a2b8',\n  // Bleu pour l'information\n  '#6f42c1',\n  // Violet\n  '#fd7e14',\n  // Orange\n  '#20c997',\n  // Teal\n  '#e83e8c' // Rose\n  ];\n  chartInstance = new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: colors.slice(0, labels.length),\n        borderWidth: 2,\n        borderColor: '#fff'\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'bottom',\n          labels: {\n            padding: 20,\n            usePointStyle: true,\n            font: {\n              size: 12\n            }\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: function label(context) {\n              var label = context.label || '';\n              var value = context.parsed;\n              var total = context.dataset.data.reduce(function (a, b) {\n                return a + b;\n              }, 0);\n              var percentage = (value / total * 100).toFixed(1);\n              return \"\".concat(label, \": \").concat(value, \" (\").concat(percentage, \"%)\");\n            }\n          }\n        }\n      },\n      animation: {\n        animateRotate: true,\n        duration: 800 // R√©duit de 1000ms √† 800ms pour de meilleures performances\n      }\n    }\n  });\n  console.log('üìä Graphique des statuts cr√©√© avec succ√®s');\n}\nfunction refreshDashboardData() {\n  // Only refresh if page is visible and we're on dashboard page\n  if (!isPageVisible || !isDashboardPage()) {\n    return;\n  }\n\n  // Refresh chart data\n  fetchChartData().then(function (data) {\n    if (data && statusChart) {\n      statusChart.data.labels = data.labels;\n      statusChart.data.datasets[0].data = data.values;\n      statusChart.update();\n    }\n  });\n\n  // Refresh stats\n  fetch('/api/stats').then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    // Update stats cards\n    var statsNumber = document.querySelector('.stats-card .stats-number');\n    if (statsNumber) {\n      statsNumber.textContent = data.total_clients || 0;\n    }\n  })[\"catch\"](function (error) {\n    console.log('Error updating stats:', error);\n  });\n}\n\n// Function to enable/disable auto-refresh\nfunction toggleAutoRefresh(enabled) {\n  autoRefreshEnabled = enabled;\n  if (refreshInterval) {\n    clearInterval(refreshInterval);\n    refreshInterval = null;\n  }\n  if (enabled && isDashboardPage()) {\n    refreshInterval = setInterval(refreshDashboardData, 60000);\n  }\n}\n\n// Function to manually refresh data\nfunction manualRefresh() {\n  if (isDashboardPage()) {\n    refreshDashboardData();\n  }\n}\n\n// Export functions for global access if needed\nwindow.dashboardFunctions = {\n  refreshDashboardData: refreshDashboardData,\n  initializeDashboard: initializeDashboard,\n  toggleAutoRefresh: toggleAutoRefresh,\n  manualRefresh: manualRefresh,\n  isDashboardPage: isDashboardPage\n};\n\n// G√©rer la visibilit√© de la page pour √©conomiser les ressources (optimis√©)\nfunction handlePageVisibility() {\n  document.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n      // Page cach√©e - arr√™ter le rafra√Æchissement et marquer comme invisible\n      isPageVisible = false;\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n        refreshInterval = null;\n      }\n      console.log('‚è∏Ô∏è Rafra√Æchissement automatique mis en pause (page cach√©e)');\n    } else {\n      // Page visible - reprendre le rafra√Æchissement\n      isPageVisible = true;\n      if (autoRefreshEnabled && !refreshInterval) {\n        refreshInterval = setInterval(refreshDashboardData, 60000);\n        // Rafra√Æchir imm√©diatement les donn√©es quand la page redevient visible\n        refreshDashboardData();\n      }\n      console.log('‚ñ∂Ô∏è Rafra√Æchissement automatique repris (page visible)');\n    }\n  });\n\n  // G√©rer √©galement le focus/blur de la fen√™tre\n  window.addEventListener('focus', function () {\n    if (!isPageVisible) {\n      isPageVisible = true;\n      if (autoRefreshEnabled && !refreshInterval) {\n        refreshInterval = setInterval(refreshDashboardData, 60000);\n        refreshDashboardData();\n      }\n    }\n  });\n  window.addEventListener('blur', function () {\n    isPageVisible = false;\n    if (refreshInterval) {\n      clearInterval(refreshInterval);\n      refreshInterval = null;\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./static/js/dashboard.js\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/dashboard.js"]();
/******/ 	
/******/ })()
;